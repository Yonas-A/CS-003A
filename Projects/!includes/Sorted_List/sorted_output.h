#ifndef SORTED_OUTPUT_H
#define SORTED_OUTPUT_H

/*

=====================================================================
                test for Sorted list functions
=====================================================================

     ======== test _big_three ========

Inserting
      : 95 : 15 : 81 : 7 : 53 : 24 : 65 : 59 : 30 : 37
        - - - - - - - - - -
list1 :
    H->[7]->[15]->[24]->[30]->[37]->[53]->[59]->[65]->[81]->[95]->|||
         - - - - - - - - - - - - - - - - - - - -

        ----- copy ctor(): list2(list1)  test ------
list1
   H->[7]->[15]->[24]->[30]->[37]->[53]->[59]->[65]->[81]->[95]->|||
         - - - - - - - - - - - - - - - - - - - -

list2
   H->[7]->[15]->[24]->[30]->[37]->[53]->[59]->[65]->[81]->[95]->|||
         - - - - - - - - - - - - - - - - - - - -

        ----- ctor = (): list3 = list1 ------
list3
   H->[7]->[15]->[24]->[30]->[37]->[53]->[59]->[65]->[81]->[95]->|||
         - - - - - - - - - - - - - - - - - - - -

     ======== end of test _big_three =======
=====================================================================
=====================================================================

   = = = TEST ACSENDING ORDER = = =
Inserting
      : 55 : 80 : 10 : 27 : 97 : 16 : 58 : 3 : 83 : 51
        - - - - - - - - - -
list1 :
    H->[3]->[10]->[16]->[27]->[51]->[55]->[58]->[80]->[83]->[97]->|||
         - - - - - - - - - - - - - - - - - - - -

   = = = end of TEST ACSENDING ORDER = = =

=====================================================================
=====================================================================

   = = = TEST DESCENDING ORDER = = =
Inserting
      : 64 : 27 : 81 : 37 : 68 : 26 : 76 : 37 : 9 : 26
   - - - - - - - - - -
list1 :
    H->[81]->[76]->[68]->[64]->[37]->[37]->[27]->[26]->[26]->[9]->|||
         - - - - - - - - - - - - - - - - - - - -

   = = = end of TEST DESCENDING ORDER = = =

=====================================================================
=====================================================================

   = = = TEST UNIQUE LIST = = =
Inserting
      : 74 : 12 : 86 : 82 : 83 : 59 : 23 : 46 : 69 : 51
        - - - - - - - - - -
list1 :
    H->[12]->[23]->[46]->[51]->[59]->[69]->[74]->[82]->[83]->[86]->|||
         - - - - - - - - - - - - - - - - - - - -



Size of list is: 10
         - - - - - - - - - - - - - - - - - - -  - -
Adding items already in the list
If duplicate items are in the list, test failed
else test is sucessful


inserting: 23
List after Insert(r):
    H->[12]->[23]->[46]->[51]->[59]->[69]->[74]->[82]->[83]->[86]->|||
         - - - - - - - - - - - - - - - - - - - -


inserting: 46
List after Insert(r):
    H->[12]->[23]->[46]->[51]->[59]->[69]->[74]->[82]->[83]->[86]->|||
         - - - - - - - - - - - - - - - - - - - -


inserting: 51
List after Insert(r):
    H->[12]->[23]->[46]->[51]->[59]->[69]->[74]->[82]->[83]->[86]->|||
         - - - - - - - - - - - - - - - - - - - -

List :
    H->[12]->[23]->[46]->[51]->[59]->[69]->[74]->[82]->[83]->[86]->|||
         - - - - - - - - - - - - - - - - - - - -
Size of list is: 10

        = = = end of TEST UNIQUE LIST = = =

=====================================================================
=====================================================================
   = = = TEST DUPLICATES LIST = = =
Inserting
      : 7 : 57 : 1 : 80 : 61 : 79 : 0 : 89 : 91 : 92
        - - - - - - - - - -
list1 :
    H->[0]->[1]->[7]->[57]->[61]->[79]->[80]->[89]->[91]->[92]->|||
         - - - - - - - - - - - - - - - - - - - -

Size of list is: 10
         - - - - - - - - - - - - - - - - - - -  - -
Adding items already in the list
If duplicate items are in the list, test sucessful
else test falied


inserting: 57
List after Insert(r):
    H->[0]->[1]->[7]->[57]->[57]->[61]->[79]->[80]->[89]->[91]->[92]->|||
         - - - - - - - - - - - - - - - - - - - -


inserting: 61
List after Insert(r):
    H->[0]->[1]->[7]->[57]->[57]->[61]->[61]->[79]->[80]->[89]->[91]->[92]->|||
         - - - - - - - - - - - - - - - - - - - -


inserting: 79
List after Insert(r):
    H->[0]->[1]->[7]->[57]->[57]->[61]->[61]->[79]->[79]->[80]->[89]->[91]->[92]->|||

         - - - - - - - - - - - - - - - - - - - -

List :
    H->[0]->[1]->[7]->[57]->[57]->[61]->[61]->[79]->[79]->[80]->[89]->[91]->[92]->|||

         - - - - - - - - - - - - - - - - - - - -

Size of list is: 13
   = = = end of TEST DUPLICATES LIST = = =


=====================================================================
=====================================================================

        ====== Test Begin() ======
myList:
     H->|||
        -------- END printing --------

        ------- test 1: empty list ---------
List is empty

        ------- test 2: list with 10 items --------
myList:
     H->[41]->[64]->[67]->[78]->[100]->[124]->[134]->[158]->[162]->[169]->|||
        -------- END printing --------

Beginning node is [41]

        ====== end of test Begin() ======

=====================================================================
=====================================================================

      ====== Test Clear_List() ======
myList:
     H->|||
        -------- END printing --------


------- test 1: empty list ---------
myList after Clear_List():    H->|||
        -------- END printing --------


------- test 2: 10 items in list ---------
Inserting 10 items in myList
myList:
     H->[41]->[64]->[67]->[78]->[100]->[124]->[134]->[158]->[162]->[169]->|||
        -------- END printing --------


myList after Clear_List():    H->|||
        -------- END printing --------

      ====== end of test Clear_List() ======


=====================================================================
=====================================================================

        ====== Test Copy_List() ======
Printing oldList
    H->[41]->[64]->[67]->[78]->[100]->[124]->[134]->[158]->[162]->[169]->|||
        -------- END printing --------


Printing newList
    H->[41]->[64]->[67]->[78]->[100]->[124]->[134]->[158]->[162]->[169]->|||
        -------- END printing --------


Last node in newList: = [169]

     ----- Check list uniqueness ------

oldList after Insert_Last(98)
    H->[41]->[64]->[67]->[78]->[98]->[100]->[124]->[134]->[158]->[162]->[169]->|||
        -------- END printing --------


newList after Insert_Last(163)
    H->[41]->[64]->[67]->[78]->[100]->[124]->[134]->[158]->[162]->[163]->[169]->|||
        -------- END printing --------


Last node in oldList: = [98]
Last node in newList: = [163]

        ====== end of test Copy_List() ======


=====================================================================
=====================================================================

        ====== Test End() ======
myList:
     H->|||
        -------- END printing --------



        ------- test 1: empty list ---------
List is empty

        ------- test 2: list with 10 items --------
myList:
     H->[41]->[64]->[67]->[78]->[100]->[124]->[134]->[158]->[162]->[169]->|||
        -------- END printing --------


Last node is [169]

        ====== end of test End() ======

=====================================================================
=====================================================================
        ====== Test Empty() ======
myList:
     H->|||
        -------- END printing --------


        ------- test 1: empty list ---------
List is empty

        ------- test 2: list with 10 items --------
myList:
     H->[41]->[64]->[67]->[78]->[100]->[124]->[134]->[158]->[162]->[169]->|||
        -------- END printing --------

List is not empty

        ====== end of test Empty() ======
=====================================================================
=====================================================================

        ====== Test Index_Of() ======

myList:
     H->[41]->[64]->[67]->[78]->[100]->[124]->[134]->[158]->[162]->[169]->|||
        -------- END printing --------


---- test 1: Index of [70] ---

70 key is not in the list

----- test 2: Index of [400] -----

400 key is not in the list

    ========= end of test _index_of() =========

=====================================================================
=====================================================================

        ====== Test operator [] ======

myList:
     H->[41]->[64]->[67]->[78]->[100]->[124]->[134]->[158]->[162]->[169]->|||
        -------- END printing --------


    ------ test 1: pos = 4------
Node at 4 = [100]

    ------ test 2: pos = -5------
Pos is a non existing position in the list
Assert from _at() in list_functions.h must terminate program
Assertion failed!

Program: C:\Users\Yonas\Desktop\Sorted\build-Sorted_list-Desktop_Qt_5_13_1_MinG
W_32_bit-Debug\debug\Sorted_list.exe
File: ..\Sorted_list/../!includes/List_F/list_functions.h, Line 179

Expression: head_ptr != nullptr && position >= 0

=====================================================================
=====================================================================
        ====== Test Print() ======

myList:
     H->[41]->[64]->[67]->[78]->[100]->[124]->[134]->[158]->[162]->[169]->|||
        -------- END printing --------

Printing list using Print()
   H->[41]->[64]->[67]->[78]->[100]->[124]->[134]->[158]->[162]->[169]->|||
        -------- END printing --------


        ====== end of test Prev() ======


=====================================================================
=====================================================================
        ====== Test Remove_Node() ======

myList:
     H->[62]->[66]->[67]->[85]->[134]->[139]->[142]->[164]->[167]->[169]->|||
         - - - - - - - - - - - - - - - - - - - -


----- test 1: remove  [85]-------
Removed item = 85
myList =
     H->[62]->[66]->[67]->[134]->[139]->[142]->[164]->[167]->[169]->|||
         - - - - - - - - - - - - - - - - - - - -


----- test 2: remove  [200]-------
Node doesn't exist. Assert from _previous_node()
        must terminate program

Assertion failed!

Program: C:\Users\Yonas\Desktop\Sorted\build-Sorted_List-Desktop_Qt_5_13_1_MinGW_32_bit-Debug\debug\Sorted_List.exe

File: C:/Users/Yonas/Desktop/Sorted/!includes/ListFunctions_Sorted/list_functio
ns.h, Line 457

Expression: walker != nullptr && iMarker != nullptr

=====================================================================
=====================================================================

        ====== Test Remove_Head() ======

myList:
     H->[36]->[37]->[43]->[82]->[84]->[96]->[102]->[136]->[166]->[175]->|||
         - - - - - - - - - - - - - - - - - - - -

----- test 1: remove  [head]-------
myList:
     H->[36]->[37]->[43]->[82]->[84]->[96]->[102]->[136]->[166]->[175]->|||
         - - - - - - - - - - - - - - - - - - - -


Removed item number 0
Removed head item = 36
list:
    H->[37]->[43]->[82]->[84]->[96]->[102]->[136]->[166]->[175]->|||
         - - - - - - - - - - - - - - - - - - - -


Removed item number 1
Removed head item = 37
list:
    H->[43]->[82]->[84]->[96]->[102]->[136]->[166]->[175]->|||
         - - - - - - - - - - - - - - - - - - - -


Removed item number 2
Removed head item = 43
list:
    H->[82]->[84]->[96]->[102]->[136]->[166]->[175]->|||
         - - - - - - - - - - - - - - - - - - - -


Removed item number 3
Removed head item = 82
list:
    H->[84]->[96]->[102]->[136]->[166]->[175]->|||
         - - - - - - - - - - - - - - - - - - - -


Removed item number 4
Removed head item = 84
list:
    H->[96]->[102]->[136]->[166]->[175]->|||
         - - - - - - - - - - - - - - - - - - - -


Removed item number 5
Removed head item = 96
list:
    H->[102]->[136]->[166]->[175]->|||
         - - - - - - - - - - - - - - - - - - - -


Removed item number 6
Removed head item = 102
list:
    H->[136]->[166]->[175]->|||
         - - - - - - - - - - - - - - - - - - - -


Removed item number 7
Removed head item = 136
list:
    H->[166]->[175]->|||
         - - - - - - - - - - - - - - - - - - - -


Removed item number 8
Removed head item = 166
list:
    H->[175]->|||
         - - - - - - - - - - - - - - - - - - - -


Removed item number 9
Removed head item = 175
list:
    H->|||
         - - - - - - - - - - - - - - - - - - - -


Removed item number 10
Empty list.No head to delete. Break loop

= = = end of test Remove_Head() = = =
=====================================================================
=====================================================================

        ====== Test Search() ======n
myList:
     H->|||
        -------- END printing --------



        ----- test 1: search 5 in empty list ------
5 is not found in the list

myList:
     H->[41]->[64]->[67]->[78]->[100]->[124]->[134]->[158]->[162]->[169]->|||
        -------- END printing --------



        ----- test 2: search 41 in the list ------
41 is found in the list


        ----- test 3: search 500 in the list ------
second ptr is null so search starts from head_ptr
500 is not found in the list


        ====== end of test Search() ======n

=====================================================================
=====================================================================

        ========== Test Size() ==========
myList:
     H->|||
        -------- END printing --------


--------- test 1: empty list -----------
Size of list is: 0
myList:
     H->[41]->[64]->[67]->[78]->[100]->[124]->[134]->[158]->[162]->[169]->|||
        -------- END printing --------


--------- test 2: a list of 10 items -----------
Size of list is:  10
=====================================================================
            End of test output for Sorted List
=====================================================================


 */
#endif // SORTED_OUTPUT_H
