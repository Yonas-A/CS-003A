#ifndef OUTPUT_LIST_H
#define OUTPUT_LIST_H
/*
=====================================================================
        test for individual functions from List.h
=====================================================================

     ======== test _big_three ========

        ----- Default Ctor: ------
myL:
     H->[74]->[88]->[31]->[91]->[78]->[21]->[18]->[2]->[0]->[89]->|||
       - - - - - - - - - - - - - - - -
        ----- copy ctor(): list2(myL) ------
myL
   H->[74]->[88]->[31]->[91]->[78]->[21]->[18]->[2]->[0]->[89]->|||
       - - - - - - - - - - - - - - - -

list2
   H->[74]->[88]->[31]->[91]->[78]->[21]->[18]->[2]->[0]->[89]->|||
       - - - - - - - - - - - - - - - -

        ----- ctor = ():  list3 = myL ------
list3
   H->[74]->[88]->[31]->[91]->[78]->[21]->[18]->[2]->[0]->[89]->|||
       - - - - - - - - - - - - - - - -

     ======== end of test _big_three ========

=====================================================================
=====================================================================

        ====== Test Begin() ======

        ------- test 1: empty list ---------
myList:
     H->|||
       - - - - - - - - - - - - - - - -
List is empty

   ------- test 2: list with 10 items --------
myList:
     H->[29]->[94]->[41]->[47]->[88]->[45]->[7]->[52]->[74]->[72]->|||
       - - - - - - - - - - - - - - - -
Beginning node is [29]

        ====== end of test Begin() ======

=====================================================================
=====================================================================
      ====== Test Clear_List() ======

------- test 1: empty list ---------
myList:
     H->|||
       - - - - - - - - - - - - - - - -
myList after Clear_List():
     H->|||
       - - - - - - - - - - - - - - - -
------- test 2: 10 items in list ---------
myList:
     H->[62]->[8]->[73]->[71]->[27]->[74]->[83]->[74]->[75]->[93]->|||
       - - - - - - - - - - - - - - - -
myList after Clear_List():
    H->|||
       - - - - - - - - - - - - - - - -
      ====== end of test Clear_List() ======

=====================================================================
=====================================================================
        ====== Test Copy_List() ======
listA:
  H->[12]->[45]->[52]->[24]->[25]->[40]->[54]->[80]->[14]->[93]->|||
       - - - - - - - - - - - - - - - -
listB:
  H->[12]->[45]->[52]->[24]->[25]->[40]->[54]->[80]->[14]->[93]->|||
       - - - - - - - - - - - - - - - -

     - - - Check list uniqueness - - -

listA after Insert_Last(98)
    H->[12]->[45]->[52]->[24]->[25]->[40]->[54]->[80]->[14]->[93]->[98]->|||
       - - - - - - - - - - - - - - - -

listB after Insert_Last(163)
    H->[12]->[45]->[52]->[24]->[25]->[40]->[54]->[80]->[14]->[1]->[163]->|||
       - - - - - - - - - - - - - - - -

Last node in listA: = [98]
Last node in listB: = [1]

        ====== end of test Copy_List() ======
=====================================================================
=====================================================================
        ====== Test End() ======

        - - - test 1: empty list - - -
myList:
     H->|||
       - - - - - - - - - - - - - - - -
List is empty

        - - - test 2: list with 10 items - - -
myList:
     H->[47]->[43]->[65]->[74]->[37]->[5]->[25]->[84]->[23]->[69]->|||
       - - - - - - - - - - - - - - - -
Last node is [69]

    ====== end of test End() ======

=====================================================================
=====================================================================

        ====== Test Empty() ======

        - - - test 1: empty list - - -
myList:
     H->|||
       - - - - - - - - - - - - - - - -
List is empty

        - - - test 2: list with 10 items - - -
myList:
     H->[99]->[29]->[35]->[77]->[24]->[12]->[96]->[98]->[60]->[94]->|||       - - - - - - - - - - - - - - - -
List is not empty

        ====== end of test Empty() ======

=====================================================================
=====================================================================

        ====== Test Insert_After() ======

---- test 1: Insert: 50 in empty list ----
myList:
     H->|||
       - - - - - - - - - - - - - - - -
List after Insert_After():
   H->[50]->|||
       - - - - - - - - - - - - - - - -

Inserted = [50]

myList:
     H->[40]->[54]->[75]->[83]->[24]->[14]->[54]->[92]->[26]->[79]->[50]->|||
       - - - - - - - - - - - - - - - -
---- test 2: Insert: 123 after [14] ----
List after Insert_After():
   H->[40]->[54]->[75]->[83]->[24]->[14]->[123]->[54]->[92]->[26]->[79]->[50]->|||
       - - - - - - - - - - - - - - - -

Inserted = [123]

       ====== end of test Insert_After() ======

=====================================================================
=====================================================================

        ====== Test Insert_Before() ======
---- test 1: insert: 50 in empty list ----
myList:
     H->|||
       - - - - - - - - - - - - - - - -

Inserted Item= [50]

myList:
      H->[50]->|||
       - - - - - - - - - - - - - - - -

---- test 2: insert: 123 before [62] ----

myList:
     H->[19]->[69]->[76]->[62]->[95]->[32]->[31]->[50]->|||
       - - - - - - - - - - - - - - - -

Inserted Item= [123]

myList:
      H->[19]->[69]->[76]->[123]->[62]->[95]->[32]->[31]->[50]->|||
       - - - - - - - - - - - - - - - -

---- test 3: insert: 750 before [50] ----

myList:
     H->[19]->[69]->[76]->[123]->[62]->[95]->[32]->[31]->[50]->|||
       - - - - - - - - - - - - - - - -
Inserted Item= [750]

myList:
      H->[19]->[69]->[76]->[123]->[62]->[95]->[32]->[31]->[750]->[50]->|||
       - - - - - - - - - - - - - - - -

       ====== end of test Insert_Before() ======

=====================================================================
=====================================================================

        ====== Test Insert_Last() ======

---- test 1: insert: 26 in empty list ----
Inserted = [26]

myList:
     H->[26]->|||
       - - - - - - - - - - - - - - - -

------ test 2: Insert: 75 in a list of 10 items  --------
Inserted = [75]

myList:
     H->[57]->[11]->[59]->[97]->[70]->[22]->[74]->[49]->[72]->[49]->[26]->[75]->|||
       - - - - - - - - - - - - - - - -


        ====== end of test Insert_Last() ======

=====================================================================
=====================================================================

        ====== Test Index_Of() ======

---- test 1: Index of [70] ---

myList:
     H->[48]->[17]->[97]->[69]->[83]->[17]->[30]->[61]->[69]->[10]->|||
       - - - - - - - - - - - - - - - -

70 key is not in the list

----- test 2: Index of [17] -----

myList:
     H->[48]->[17]->[97]->[69]->[83]->[17]->[30]->[61]->[69]->[10]->|||
       - - - - - - - - - - - - - - - -

Index of [17] is 1

    ========= end of test _index_of() =========

=====================================================================
=====================================================================


        ====== Test operator [] ======

    ------ test 1: pos = 9 ------
myList:
     H->[42]->[87]->[90]->[16]->[69]->[7]->[47]->[11]->[30]->[0]->|||
       - - - - - - - - - - - - - - - -

Node at 9 = [0]

    ------ test 2: pos = -5 ------
myList:
     H->[42]->[87]->[90]->[16]->[69]->[7]->[47]->[11]->[30]->[0]->|||
       - - - - - - - - - - - - - - - -

Pos is a non existing position in the list
Assert from _at() in list_functions.h must terminate program
Assertion failed!

Program: C:\Users\Yonas\Desktop\Iterated List\Iterated Listbuild-Iterated_List-
Desktop_Qt_5_13_1_MinGW_32_bit-Debug\debug\Iterated_List.exe
File: ..\Iterated_List/../!includes/List_Class/../List_Functions/list_functions.h, Li
ne 161

Expression: head_ptr != nullptr && position >= 0

=====================================================================
=====================================================================

        ====== Test Previous() ======

myList:
     H->[83]->[14]->[10]->[20]->[27]->[83]->[69]->[65]->[11]->[86]->|||
       - - - - - - - - - - - - - - - -

----- test 1: previous to [20]-------
Node before [20] is: [10]

myList:
     H->[83]->[14]->[10]->[20]->[27]->[83]->[69]->[65]->[11]->[86]->|||
       - - - - - - - - - - - - - - - -

----- test 2: previous to [86]-------
Node before [86] is: [11]

myList:
     H->[83]->[14]->[10]->[20]->[27]->[83]->[69]->[65]->[11]->[86]->|||
       - - - - - - - - - - - - - - - -

----- test 3: previous to [83]-------
Node before [83] is: head

myList:
     H->[83]->[14]->[10]->[20]->[27]->[83]->[69]->[65]->[11]->[86]->|||
       - - - - - - - - - - - - - - - -

----- test 4: previous to [1500]-------
After this line assert from _previous_node must
end program since node doesn't exist

Assertion failed!

Program: C:\Users\Yonas\Desktop\Iterated List\Iterated Listbuild-Iterated_List-
Desktop_Qt_5_13_1_MinGW_32_bit-Debug\debug\Iterated_List.exe
File: ..\Iterated_List/../!includes/List_Class/../List_Functions/list_functions.h, Li
ne 531

Expression: walker != nullptr && iMarker != nullptr


=====================================================================
=====================================================================

        ====== Test Print() ======

myList:
     H->[83]->[12]->[31]->[91]->[69]->[77]->[73]->[6]->[96]->[85]->|||
       - - - - - - - - - - - - - - - -

Printing list using Print()
H->[83]->[12]->[31]->[91]->[69]->[77]->[73]->[6]->[96]->[85]->|||
       - - - - - - - - - - - - - - - -

        ====== end of test Print() ======

=====================================================================
=====================================================================

        ====== Test Remove_Node() ======

myList:
     H->[86]->[43]->[74]->[38]->[82]->[98]->[39]->[16]->[81]->[12]->|||
       - - - - - - - - - - - - - - - -

----- test 1: remove  [82]-------
Removed item = 82
myList:
     H->[86]->[43]->[74]->[38]->[98]->[39]->[16]->[81]->[12]->|||
       - - - - - - - - - - - - - - - -

myList:
     H->[86]->[43]->[74]->[38]->[98]->[39]->[16]->[81]->[12]->|||
       - - - - - - - - - - - - - - - -

----- test 2: remove  [200]-------
Node doesn't exist. Assert from _previous_node()
        must terminate program

Assertion failed!

Program: C:\Users\Yonas\Desktop\Iterated List\Iterated Listbuild-Iterated_List-
Desktop_Qt_5_13_1_MinGW_32_bit-Debug\debug\Iterated_List.exe
File: ..\Iterated_List/../!includes/List_Class/../List_Functions/list_functions.h, Li
ne 531

Expression: walker != nullptr && iMarker != nullptr

=====================================================================
=====================================================================

        ====== Test Remove_Head() ======

myList:
     H->[16]->[15]->[6]->[98]->[30]->[66]->[50]->[55]->[81]->[82]->|||
       - - - - - - - - - - - - - - - -

----- test  remove  [head]-------
Removing item number 0
Removed head item = 16
new list:
     H->[15]->[6]->[98]->[30]->[66]->[50]->[55]->[81]->[82]->|||
       - - - - - - - - - - - - - - - -

Removing item number 1
Removed head item = 15
new list:
     H->[6]->[98]->[30]->[66]->[50]->[55]->[81]->[82]->|||
       - - - - - - - - - - - - - - - -

Removing item number 2
Removed head item = 6
new list:
     H->[98]->[30]->[66]->[50]->[55]->[81]->[82]->|||
       - - - - - - - - - - - - - - - -

Removing item number 3
Removed head item = 98
new list:
     H->[30]->[66]->[50]->[55]->[81]->[82]->|||
       - - - - - - - - - - - - - - - -

Removing item number 4
Removed head item = 30
new list:
     H->[66]->[50]->[55]->[81]->[82]->|||
       - - - - - - - - - - - - - - - -

Removing item number 5
Removed head item = 66
new list:
     H->[50]->[55]->[81]->[82]->|||
       - - - - - - - - - - - - - - - -

Removing item number 6
Removed head item = 50
new list:
     H->[55]->[81]->[82]->|||
       - - - - - - - - - - - - - - - -

Removing item number 7
Removed head item = 55
new list:
     H->[81]->[82]->|||
       - - - - - - - - - - - - - - - -

Removing item number 8
Removed head item = 81
new list:
     H->[82]->|||
       - - - - - - - - - - - - - - - -

Removing item number 9
Removed head item = 82
new list:
     H->|||
       - - - - - - - - - - - - - - - -

Removing item number 10
List is empty. No head to delete. Break loop

        ====== end of test Remove_Head() ======

=====================================================================
=====================================================================

        ====== Test Search() ======
myList:
     H->|||
       - - - - - - - - - - - - - - - -

    - - - test 1: search 400 in empty list - - -
400 is not found in the list

myList:
     H->[32]->[46]->[23]->[24]->[66]->[83]->[29]->[39]->[45]->[10]->|||
       - - - - - - - - - - - - - - - -

    - - - test 2: search 46 in myList - - -
MySearch = 46

myList:
     H->[32]->[46]->[23]->[24]->[66]->[83]->[29]->[39]->[45]->[10]->|||
       - - - - - - - - - - - - - - - -

    - - - test 3: search 500 in myList - - -
500 is not found in the list


        ====== end of test Search() ======

=====================================================================
=====================================================================

        ========== Test Size() ==========
myList:
     H->|||
       - - - - - - - - - - - - - - - -

--------- test 1: empty list -----------
Size of list is: 0

Inserting 10 items
myList:
     H->[66]->[85]->[43]->[58]->[67]->[70]->[98]->[95]->[65]->[60]->|||
       - - - - - - - - - - - - - - - -

--------- test 2: a list of 10 items -----------
Size of list is:  10

   ========== end of test Size() ==========

=====================================================================
=====================================================================
        END OF TEST RUN FOR EACH FUNCTIONS OF LIST.H iterated
=====================================================================
=====================================================================
 */
#endif // OUTPUT_LIST_H
